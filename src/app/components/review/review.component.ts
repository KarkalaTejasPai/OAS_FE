import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HeaderComponent } from "../shared/header/header.component";
import { FooterComponent } from "../shared/footer/footer.component";
import { HttpClient } from '@angular/common/http';
import { AuthService } from '../Services/auth.service';
import { Location } from '@angular/common';

// Update the interface to match API format
interface ReviewRequest {
  reviewID: number;    // Auto-generated, send as 0
  userID: number;      // Changed from reviewerId
  targetUserID: number;  // Changed to match API case
  rating: number;
  comment: string;
  date: string;        // Changed to string format
}

@Component({
  selector: 'app-review',
  standalone: true,
  imports: [FormsModule, CommonModule, HeaderComponent, FooterComponent],
  templateUrl: './review.component.html',
  styleUrls: [
    './review.component.css',
    '../../../../node_modules/@fortawesome/fontawesome-free/css/all.min.css'
  ]
})

export class ReviewComponent implements OnInit {
  userId: number = 0;
  reviewerId: number = 0; 
  rating: number = 0;
  comment: string = '';
  stars: number[] = [1, 2, 3, 4, 5];
  errorMessage: string = '';
  successMessage: string = '';

  constructor(
    private http: HttpClient,
    private authService: AuthService,
    private location: Location
  ) {}
  
  ngOnInit(): void {
    const loggedInUserId = localStorage.getItem('userId');
    if (loggedInUserId) {
      this.reviewerId = parseInt(loggedInUserId);
    } else {
      this.errorMessage = 'Please login to submit a review';
    }
  }

  submitReview(): void {
    this.errorMessage = '';
    this.successMessage = '';

    if (!this.validateForm()) {
      console.log('Form validation failed');
      return;
    }

    const review: ReviewRequest = {
      reviewID: 0,  // Will be auto-generated by backend
      userID: this.reviewerId,  // Using reviewerId as userID
      targetUserID: this.userId,
      rating: this.rating,
      comment: this.comment,
      date: new Date().toISOString()  // Convert to ISO string format
    };

    // Debug logs
    console.log('Form Data being sent to backend:');
    console.log('User ID:', review.userID);
    console.log('Target User ID:', review.targetUserID);
    console.log('Rating:', review.rating);
    console.log('Comment:', review.comment);
    console.log('Date:', review.date);
    console.log('Complete review object:', review);

    this.http.post('https://localhost:44385/api/Review', review)
      .subscribe({
        next: (response) => {
          console.log('Response from backend:', response);
          this.successMessage = 'Review submitted successfully!';
          this.resetForm();
        },
        error: (error) => {
          console.error('Error submitting review:', error);
          this.errorMessage = 'Failed to submit review. Please try again.';
        }
      });
  }

  private validateForm(): boolean {
    if (!this.reviewerId) {
      this.errorMessage = 'Please login to submit a review';
      return false;
    }
    if (!this.userId) {
      this.errorMessage = 'Please enter target user ID';
      return false;
    }
    if (this.rating === 0) {
      this.errorMessage = 'Please select a rating';
      return false;
    }
    if (!this.comment.trim()) {
      this.errorMessage = 'Please enter a comment';
      return false;
    }
    if (!this.reviewerId || this.reviewerId === 0) {
      this.errorMessage = 'Please login to submit a review';
      console.log('Validation failed: No reviewerId'); // Debug log
      return false;
    }
    if (!this.userId || this.userId === 0) {
      this.errorMessage = 'Please enter target user ID';
      console.log('Validation failed: No targetUserId'); // Debug log
      return false;
    }
    return true;
  }

  setRating(value: number): void {
    this.rating = value;
  }

  private resetForm(): void {
    this.userId = 0;
    this.rating = 0;
    this.comment = '';
  }

  goBack(): void {
    this.location.back();
  }
}
